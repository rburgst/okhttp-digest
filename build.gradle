buildscript {
    ext.kotlin_version = '1.3-M2'
    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.shyiko:ktlint:0.27.0"
    }
}

plugins {
    id "com.gradle.build-scan" version "1.16"
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'net.nemerosa.versioning' version '2.7.1'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'com.baulsupp'
archivesBaseName = "okhttp-digest"

versioning {
    // TODO automate this
    releaseMode = project.hasProperty('releaseMode') ? project.property('releaseMode') : 'snapshot'
}

version = versioning.info.display

description = "OkHttp Digest"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.apiVersion = "1.3"
    kotlinOptions.languageVersion = "1.3"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.apiVersion = "1.3"
    kotlinOptions.languageVersion = "1.3"
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:3.11.0"
    implementation 'com.squareup.okio:okio:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.25.1-eap13'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta2'

    testImplementation "org.mockito:mockito-core:2.15.0"
    testImplementation 'org.assertj:assertj-core:3.9.1'
    testImplementation "com.squareup.okhttp3:logging-interceptor:3.11.0"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.11.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testRuntime 'org.slf4j:slf4j-jdk14:1.8.0-beta2'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

//packaging tests
task packageTests(type: Jar) {
    from sourceSets.test.output
    classifier = 'tests'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar, packageTests, jar
}

// TODO support publish to maven local

if (project.hasProperty('ossrhUser')) {
    signing {
        sign configurations.archives
    }

    nexusStaging {
        username = ossrhUser
        password = ossrhPassword
//  packageGroup = "org.mycompany.myproject" //optional if packageGroup == project.getGroup()
//  stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                pom.project {
                    name project.name
                    group 'com.baulsupp'
                    description "OkHttp Digest Authentication"
                    url "https://github.com/yschimke/okhttp-digest"

                    scm {
                        connection 'scm:git:https://github.com/yschimke/okhttp-digest.git'
                        developerConnection 'scm:git:git@github.com:yschimke/okhttp-digest.git'
                        url 'https://github.com/yschimke/okhttp-digest.git'
                    }

                    licenses {
                        license {
                            name 'Apache License'
                            url 'http://opensource.org/licenses/apache-2.0'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'yschimke'
                            name = 'Yuri Schimke'
                            email = 'yuri@schimke.ee'
                        }
                    }

                    packaging 'jar'
                }
            }
        }
    }
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

test {
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter', 'junit-vintage'
    }

    failFast = true
}
